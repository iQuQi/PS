#include <iostream>
#include <string>
#include <queue>
#include <vector>
using namespace std;
int arr[51][51];
int com[51], m, n;
int _x[4] = { 0,1,0,-1 };
int _y[4] = { 1,0,-1,0 };
//k 0 - 아래, 1 - 오른쪽, 2 - 위 ,3 - 왼쪽 
int visited[51][51];

/*
차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 
농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에,
한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 

이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다.
특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 
이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다. 
한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있는 것이다.

한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다. 
배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 인접해있는 
배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다.

예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다. 
0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.

1	1	0	0	0	0	0	0	0	0
0	1	0	0	0	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	1	1	0	0	0	1	1	1
0	0	0	0	1	0	0	1	1	1
*/

//조건 검사 함수
bool isOk(int i, int j) {
	if (i<0 || i>n || j<0 || j>m || visited[i][j] || !arr[i][j])
	{
		return false;
	}
	return true;
}

//DFS 함수
void dfs(int i, int j) {
	
	visited[i][j] = 1;
	for (int k = 0; k < 4; k++)
	{
		if (isOk(i + _x[k], j + _y[k])) {
			dfs(i + _x[k], j + _y[k]);
		}
	}
}



int main()
{
	int t, k;
	int x, y;
	//테스트 케이스
	cin >> t;
	for (int z = 1; z <= t; z++)
	{
		//배추 가로길이/세로길이/심어져있는 위치의 개수
		cin >> m >> n >> k;

		//배추의 위치 입력 받기
		for (int i = 0; i < k; i++) {
			cin >> x >> y;
			arr[y][x] = 1;
		}


		//컴포넌트 계산하기
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				//배추가 존재하고 아직 방문하지 않은 정점이라면 
				if (!visited[i][j] && arr[i][j])
				{
					com[z]++;
					dfs(i, j);
				}
			}
		}

		//초기화 *** 테스트 케이스가 있는 문제는 항상 초기화 필수
		for (int i = 0; i < 51; i++)
		{
			for (int j = 0; j < 51; j++)
			{
				visited[i][j] = 0;
				arr[i][j] = 0;
			}
		}

	}
	//각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리 수를 출력
	for (int i = 1; i <= t; i++)
	{
		cout << com[i] << endl;
	}
}